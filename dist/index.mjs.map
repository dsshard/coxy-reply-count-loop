{"version":3,"sources":["../src/index.ts"],"names":["replayCountLoop","fn","options","attempt","replay","err","resolve"],"mappings":"AAMe,SAARA,EAAoCC,CAAIC,CAAAA,CAAAA,CAAkC,EAAC,CAAe,CAC/F,GAAI,CAACD,CAAI,CAAA,MAAM,IAAI,KAAM,CAAA,kCAAkC,CAC3D,CAAA,IAAIE,EAAU,CACd,CAAA,eAAeC,CAAS,EAAA,CACtB,GAAI,CACF,OAAO,MAAMH,CAAAA,CAAG,CAAE,OAAAE,CAAAA,CAAQ,CAAC,CAC7B,OAASE,CAAK,CAAA,CAGZ,GAFAF,CAAW,EAAA,CAAA,CAEPD,EAAQ,QAAW,CAAA,CAAA,EAAKC,CAAUD,CAAAA,CAAAA,CAAQ,SAAU,MAAM,IAAI,KAAMG,CAAAA,CAAG,EAC3E,OAAI,OAAOH,CAAQ,CAAA,OAAA,EAAY,YAAYA,CAAQ,CAAA,OAAA,CAAQG,CAAG,CAAA,CAEvD,IAAI,OAASC,CAAAA,CAAAA,EAAY,CAC9B,UAAA,CAAW,IAAM,CACfA,CAAAA,CAAQF,CAAO,EAAC,EAClB,CAAGF,CAAAA,CAAAA,CAAQ,KAAS,EAAA,CAAC,EACvB,CAAC,CACH,CACF,CACA,OAAOE,GACT","file":"index.mjs","sourcesContent":["export interface ReplayCountLoopOptions {\n  attempts?: number\n  onError?: (err) => void\n  delay?: number\n}\n\nexport default function replayCountLoop<T>(fn, options: ReplayCountLoopOptions = {}): Promise<T> {\n  if (!fn) throw new Error('first parameter (fn) is required')\n  let attempt = 0\n  async function replay() {\n    try {\n      return await fn({ attempt })\n    } catch (err) {\n      attempt += 1\n\n      if (options.attempts > 0 && attempt > options.attempts) throw new Error(err)\n      if (typeof options.onError === 'function') options.onError(err)\n\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve(replay())\n        }, options.delay || 0)\n      })\n    }\n  }\n  return replay()\n}\n"]}